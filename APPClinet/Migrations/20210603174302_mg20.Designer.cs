// <auto-generated />
using System;
using APPClinet.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace APPClinet.Migrations
{
    [DbContext(typeof(APPClinetDbContext))]
    [Migration("20210603174302_mg20")]
    partial class mg20
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ActiveCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateActiveCode")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEmailConfirmed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IDEmailConfirmed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Newsletter")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.About.ChurchCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ActivePassive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FontName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("TitleCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tbl_ChurchCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.About.ChurchDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ActivePassive")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CountViews")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Tbl_ChurchDetails");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.About.ChurchSubCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ActivePassive")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FontName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("TitleSubCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tbl_ChurchSubCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Events.EventCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ActivePassive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FontName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("TitleCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tbl_EventCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Events.EventDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ActivePassive")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CountViews")
                        .HasColumnType("int");

                    b.Property<string>("Countdown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmbedLinkGoogleMap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("PrivateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StartAt")
                        .HasColumnType("int");

                    b.Property<int?>("StopAt")
                        .HasColumnType("int");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Telegram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Youtube")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Tbl_EventDetails");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Events.EventSubCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ActivePassive")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FontName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("TitleSubCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tbl_EventSubCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Galleries.GalleryCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ActivePassive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FontName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("TitleCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tbl_GalleryCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Galleries.GalleryDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ActivePassive")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CountViews")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmbedLinkGoogleMap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("PrivateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Telegram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Youtube")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Tbl_GalleryDetails");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Galleries.GalleryImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ActivePassive")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CountViews")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DetailId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DetailId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Tbl_GalleryImages");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Galleries.GallerySubCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ActivePassive")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CountViews")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FontName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("TitleSubCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tbl_GallerySubCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Teams.TeamCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ActivePassive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FontName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("TitleCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tbl_TeamCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Teams.TeamDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ActivePassive")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CountViews")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstNameEN")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LastNameEN")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("PrivateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Telegram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Youtube")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Tbl_TeamDetails");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Teams.TeamSubCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ActivePassive")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CountViews")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FontName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("TitleSubCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tbl_TeamSubCategories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.About.ChurchDetails", b =>
                {
                    b.HasOne("APPClinet.Areas.Identity.Data.Models.Categories.Church.About.ChurchCategories", "Tbl_ChurchCategories")
                        .WithMany("Tbl_ChurchDetails")
                        .HasForeignKey("CategoryId");

                    b.HasOne("APPClinet.Areas.Identity.Data.Models.Categories.Church.About.ChurchSubCategories", "Tbl_ChurchSubCategories")
                        .WithMany("Tbl_ChurchDetails")
                        .HasForeignKey("SubCategoryId");

                    b.HasOne("APPClinet.Areas.Identity.Data.ApplicationUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AspNetUsers");

                    b.Navigation("Tbl_ChurchCategories");

                    b.Navigation("Tbl_ChurchSubCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.About.ChurchSubCategories", b =>
                {
                    b.HasOne("APPClinet.Areas.Identity.Data.Models.Categories.Church.About.ChurchCategories", "Tbl_ChurchCategories")
                        .WithMany("Tbl_ChurchSubCategories")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Tbl_ChurchCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Events.EventDetails", b =>
                {
                    b.HasOne("APPClinet.Areas.Identity.Data.Models.Categories.Church.Events.EventCategories", "Tbl_EventCategories")
                        .WithMany("Tbl_EventDetails")
                        .HasForeignKey("CategoryId");

                    b.HasOne("APPClinet.Areas.Identity.Data.Models.Categories.Church.Events.EventSubCategories", "Tbl_EventSubCategories")
                        .WithMany("Tbl_EventDetails")
                        .HasForeignKey("SubCategoryId");

                    b.HasOne("APPClinet.Areas.Identity.Data.ApplicationUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AspNetUsers");

                    b.Navigation("Tbl_EventCategories");

                    b.Navigation("Tbl_EventSubCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Events.EventSubCategories", b =>
                {
                    b.HasOne("APPClinet.Areas.Identity.Data.Models.Categories.Church.Events.EventCategories", "Tbl_EventCategories")
                        .WithMany("Tbl_EventSubCategories")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Tbl_EventCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Galleries.GalleryDetails", b =>
                {
                    b.HasOne("APPClinet.Areas.Identity.Data.Models.Categories.Church.Galleries.GalleryCategories", "Tbl_GalleryCategories")
                        .WithMany("Tbl_GalleryDetails")
                        .HasForeignKey("CategoryId");

                    b.HasOne("APPClinet.Areas.Identity.Data.Models.Categories.Church.Galleries.GallerySubCategories", "Tbl_GallerySubCategories")
                        .WithMany("Tbl_GalleryDetails")
                        .HasForeignKey("SubCategoryId");

                    b.HasOne("APPClinet.Areas.Identity.Data.ApplicationUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AspNetUsers");

                    b.Navigation("Tbl_GalleryCategories");

                    b.Navigation("Tbl_GallerySubCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Galleries.GalleryImages", b =>
                {
                    b.HasOne("APPClinet.Areas.Identity.Data.Models.Categories.Church.Galleries.GalleryCategories", "Tbl_GalleryCategories")
                        .WithMany("Tbl_GalleryIamges")
                        .HasForeignKey("CategoryId");

                    b.HasOne("APPClinet.Areas.Identity.Data.Models.Categories.Church.Galleries.GalleryDetails", "Tbl_GalleryDetails")
                        .WithMany("Tbl_GalleryIamges")
                        .HasForeignKey("DetailId");

                    b.HasOne("APPClinet.Areas.Identity.Data.Models.Categories.Church.Galleries.GallerySubCategories", "Tbl_GallerySubCategories")
                        .WithMany("Tbl_GalleryIamges")
                        .HasForeignKey("SubCategoryId");

                    b.HasOne("APPClinet.Areas.Identity.Data.ApplicationUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AspNetUsers");

                    b.Navigation("Tbl_GalleryCategories");

                    b.Navigation("Tbl_GalleryDetails");

                    b.Navigation("Tbl_GallerySubCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Galleries.GallerySubCategories", b =>
                {
                    b.HasOne("APPClinet.Areas.Identity.Data.Models.Categories.Church.Galleries.GalleryCategories", "Tbl_GalleryCategories")
                        .WithMany("Tbl_GallerySubCategories")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Tbl_GalleryCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Teams.TeamDetails", b =>
                {
                    b.HasOne("APPClinet.Areas.Identity.Data.Models.Categories.Church.Teams.TeamCategories", "Tbl_TeamCategories")
                        .WithMany("Tbl_TeamDetails")
                        .HasForeignKey("CategoryId");

                    b.HasOne("APPClinet.Areas.Identity.Data.Models.Categories.Church.Teams.TeamSubCategories", "Tbl_TeamSubCategories")
                        .WithMany("Tbl_TeamDetails")
                        .HasForeignKey("SubCategoryId");

                    b.HasOne("APPClinet.Areas.Identity.Data.ApplicationUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AspNetUsers");

                    b.Navigation("Tbl_TeamCategories");

                    b.Navigation("Tbl_TeamSubCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Teams.TeamSubCategories", b =>
                {
                    b.HasOne("APPClinet.Areas.Identity.Data.Models.Categories.Church.Teams.TeamCategories", "Tbl_TeamCategories")
                        .WithMany("Tbl_TeamSubCategories")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Tbl_TeamCategories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("APPClinet.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("APPClinet.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APPClinet.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("APPClinet.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.About.ChurchCategories", b =>
                {
                    b.Navigation("Tbl_ChurchDetails");

                    b.Navigation("Tbl_ChurchSubCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.About.ChurchSubCategories", b =>
                {
                    b.Navigation("Tbl_ChurchDetails");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Events.EventCategories", b =>
                {
                    b.Navigation("Tbl_EventDetails");

                    b.Navigation("Tbl_EventSubCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Events.EventSubCategories", b =>
                {
                    b.Navigation("Tbl_EventDetails");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Galleries.GalleryCategories", b =>
                {
                    b.Navigation("Tbl_GalleryDetails");

                    b.Navigation("Tbl_GalleryIamges");

                    b.Navigation("Tbl_GallerySubCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Galleries.GalleryDetails", b =>
                {
                    b.Navigation("Tbl_GalleryIamges");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Galleries.GallerySubCategories", b =>
                {
                    b.Navigation("Tbl_GalleryDetails");

                    b.Navigation("Tbl_GalleryIamges");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Teams.TeamCategories", b =>
                {
                    b.Navigation("Tbl_TeamDetails");

                    b.Navigation("Tbl_TeamSubCategories");
                });

            modelBuilder.Entity("APPClinet.Areas.Identity.Data.Models.Categories.Church.Teams.TeamSubCategories", b =>
                {
                    b.Navigation("Tbl_TeamDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
